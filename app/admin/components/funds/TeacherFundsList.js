// app/teacher/components/funds/TeacherFundsList.js
'use client';

import React, { useState, useEffect } from 'react';
import { teacherAPI } from '../../../lib/member_api';
import { targetRolesUtils } from '../../../lib/target_roles_utils';

const TeacherFundsList = () => {
  const [fundsData, setFundsData] = useState({ categories: [] });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedYear, setSelectedYear] = useState('2568');
  const [userRole, setUserRole] = useState(null);

  // Load user role and funds data
  useEffect(() => {
    loadUserRoleAndFunds();
  }, [selectedYear]);

  const loadUserRoleAndFunds = async () => {
    try {
      setLoading(true);
      setError(null);

      // Get current user role
      const roleInfo = await teacherAPI.getCurrentUserRole();
      setUserRole(roleInfo);

      // Get funds visible to teacher
      const funds = await teacherAPI.getVisibleFundsStructure(selectedYear);
      setFundsData(funds);

    } catch (err) {
      console.error('Error loading funds:', err);
      setError(err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏ô');
    } finally {
      setLoading(false);
    }
  };

  // Handle year selection change
  const handleYearChange = (year) => {
    setSelectedYear(year);
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
        <span className="ml-3 text-gray-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏ô...</span>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-50 border border-red-200 rounded-lg p-4">
        <div className="flex items-center">
          <div className="text-red-600 mr-3">‚ö†Ô∏è</div>
          <div>
            <h3 className="text-red-800 font-medium">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</h3>
            <p className="text-red-600 text-sm mt-1">{error}</p>
          </div>
        </div>
        <button 
          onClick={loadUserRoleAndFunds}
          className="mt-3 bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700 transition-colors"
        >
          ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        </button>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="bg-white rounded-lg border border-gray-200 p-6">
        <div className="flex justify-between items-center mb-4">
          <h1 className="text-2xl font-bold text-gray-900">
            ‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡πà‡∏ô‡∏Ç‡∏≠‡πÑ‡∏î‡πâ
          </h1>
          {userRole && (
            <div className="text-sm text-gray-600">
              ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: <span className="font-medium text-blue-600">
                {userRole.is_teacher ? '‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå' : 
                 userRole.is_staff ? '‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà' : 
                 userRole.is_admin ? '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö' : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
              </span>
            </div>
          )}
        </div>

        {/* Year Selector */}
        <div className="flex items-center space-x-3">
          <label className="text-sm font-medium text-gray-700">‡∏õ‡∏µ‡∏á‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì:</label>
          <select 
            value={selectedYear}
            onChange={(e) => handleYearChange(e.target.value)}
            className="border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="2568">2568</option>
            <option value="2567">2567</option>
            <option value="2566">2566</option>
          </select>
        </div>
      </div>

      {/* Funds Categories */}
      {fundsData.categories.length === 0 ? (
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-6 text-center">
          <div className="text-yellow-600 text-lg mb-2">üìã</div>
          <h3 className="text-yellow-800 font-medium mb-1">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡πà‡∏ô‡∏Ç‡∏≠‡πÑ‡∏î‡πâ</h3>
          <p className="text-yellow-600 text-sm">
            ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡πà‡∏ô‡∏Ç‡∏≠‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏õ‡∏µ {selectedYear}
          </p>
        </div>
      ) : (
        <div className="space-y-4">
          {fundsData.categories.map((category) => (
            <CategoryCard 
              key={category.category_id} 
              category={category} 
              userRole={userRole}
            />
          ))}
        </div>
      )}

      {/* Footer Info */}
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
        <p className="text-blue-800 text-sm">
          <strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡πà‡∏ô‡∏Ç‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô 
          ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏ó‡∏∏‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∑‡πà‡∏ô ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö
        </p>
      </div>
    </div>
  );
};

// Category Card Component
const CategoryCard = ({ category, userRole }) => {
  const [isExpanded, setIsExpanded] = useState(true);

  return (
    <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
      {/* Category Header */}
      <div 
        className="bg-gray-50 px-6 py-4 cursor-pointer hover:bg-gray-100 transition-colors"
        onClick={() => setIsExpanded(!isExpanded)}
      >
        <div className="flex justify-between items-center">
          <h2 className="text-lg font-semibold text-gray-900">
            {category.category_name}
          </h2>
          <div className="flex items-center space-x-3">
            <span className="text-sm text-gray-500">
              {category.subcategories?.length || 0} ‡∏ó‡∏∏‡∏ô‡∏¢‡πà‡∏≠‡∏¢
            </span>
            <svg 
              className={`w-5 h-5 text-gray-500 transform transition-transform ${
                isExpanded ? 'rotate-180' : ''
              }`}
              fill="none" 
              stroke="currentColor" 
              viewBox="0 0 24 24"
            >
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
            </svg>
          </div>
        </div>
      </div>

      {/* Subcategories */}
      {isExpanded && (
        <div className="divide-y divide-gray-100">
          {category.subcategories?.map((subcategory) => (
            <SubcategoryCard 
              key={subcategory.subcategorie_id} 
              subcategory={subcategory}
              userRole={userRole}
            />
          ))}
        </div>
      )}
    </div>
  );
};

// Subcategory Card Component
const SubcategoryCard = ({ subcategory, userRole }) => {
  const [showDetails, setShowDetails] = useState(false);

  // Parse target_roles for display
  const targetRoles = targetRolesUtils.parseTargetRoles(subcategory.target_roles);
  const roleDisplay = targetRolesUtils.formatTargetRolesForDisplay(targetRoles);

  return (
    <div className="p-6 hover:bg-gray-50 transition-colors">
      <div className="flex justify-between items-start">
        <div className="flex-1">
          <h3 className="text-lg font-medium text-gray-900 mb-2">
            {subcategory.subcategorie_name}
          </h3>
          
          {/* Fund Details */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm mb-3">
            <div>
              <span className="text-gray-500">‡∏á‡∏á‡∏ö‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£:</span>
              <div className="font-medium text-green-600">
                {subcategory.allocated_amount?.toLocaleString() || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} ‡∏ö‡∏≤‡∏ó
              </div>
            </div>
            <div>
              <span className="text-gray-500">‡∏á‡∏á‡∏ö‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠:</span>
              <div className="font-medium text-blue-600">
                {subcategory.remaining_budget?.toLocaleString() || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} ‡∏ö‡∏≤‡∏ó
              </div>
            </div>
            <div>
              <span className="text-gray-500">‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏∏‡∏ô:</span>
              <div className="font-medium">
                {subcategory.max_amount_per_grant?.toLocaleString() || '‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î'} ‡∏ö‡∏≤‡∏ó
              </div>
            </div>
            <div>
              <span className="text-gray-500">‡∏ó‡∏∏‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠:</span>
              <div className="font-medium">
                {subcategory.remaining_grant !== null ? subcategory.remaining_grant : '‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î'} ‡∏ó‡∏∏‡∏ô
              </div>
            </div>
          </div>

          {/* Target Roles Info */}
          <div className="mb-3">
            <span className="text-gray-500 text-sm">‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡πà‡∏ô‡∏Ç‡∏≠:</span>
            <span className="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
              {roleDisplay}
            </span>
          </div>

          {/* Fund Condition */}
          {subcategory.fund_condition && (
            <div className="mb-3">
              <button
                onClick={() => setShowDetails(!showDetails)}
                className="text-blue-600 hover:text-blue-800 text-sm font-medium"
              >
                {showDetails ? '‡∏ã‡πà‡∏≠‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç' : '‡∏î‡∏π‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏ó‡∏∏‡∏ô'}
              </button>
              
              {showDetails && (
                <div className="mt-2 p-3 bg-gray-50 rounded-lg">
                  <p className="text-sm text-gray-700 whitespace-pre-line">
                    {subcategory.fund_condition}
                  </p>
                </div>
              )}
            </div>
          )}
        </div>

        {/* Action Button */}
        <div className="ml-4">
          <button
            onClick={() => handleApplyForFund(subcategory)}
            disabled={subcategory.remaining_budget <= 0 || subcategory.remaining_grant === 0}
            className={`px-4 py-2 rounded-md font-medium transition-colors ${
              subcategory.remaining_budget <= 0 || subcategory.remaining_grant === 0
                ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                : 'bg-blue-600 text-white hover:bg-blue-700'
            }`}
          >
            {subcategory.remaining_budget <= 0 ? '‡∏á‡∏ö‡∏´‡∏°‡∏î' : 
             subcategory.remaining_grant === 0 ? '‡∏ó‡∏∏‡∏ô‡∏´‡∏°‡∏î' : '‡∏¢‡∏∑‡πà‡∏ô‡∏Ç‡∏≠‡∏ó‡∏∏‡∏ô'}
          </button>
        </div>
      </div>
    </div>
  );
};

// Handle apply for fund
const handleApplyForFund = (subcategory) => {
  // Navigate to application form or open modal
  // This would typically use Next.js router to navigate to application form
  // router.push(`/teacher/applications/new?subcategory=${subcategory.subcategorie_id}`);
};

export default TeacherFundsList;