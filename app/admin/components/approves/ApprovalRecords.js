// app/admin/components/approves/ApprovalRecords.js
'use client';

import React, { useEffect, useMemo, useState } from 'react';
import { FileCheck, FileText, Filter, Download } from 'lucide-react';

import PageLayout from '../common/PageLayout';
import Card from '../common/Card';
import StatusBadge from '@/app/admin/components/common/StatusBadge';
import { toast } from 'react-hot-toast';

import adminAPI from '@/app/lib/admin_api';
import apiClient from '@/app/lib/api';

// ===== Mock ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ‚Äú‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‚Äù ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤ endpoint ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏à‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏° =====
const MOCK_DATA = [
  {
    categoryId: 1,
    categoryName: '‡∏ó‡∏∏‡∏ô‡∏™‡πà‡∏á‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡∏à‡∏±‡∏¢',
    subItems: [
      { id: 11, name: '‡∏ó‡∏∏‡∏ô‡∏¢‡πà‡∏≠‡∏¢ 1', amount: 5000 },
      { id: 12, name: '‡∏ó‡∏∏‡∏ô‡∏¢‡πà‡∏≠‡∏¢ 2', amount: null },
      { id: 13, name: '‡∏ó‡∏∏‡∏ô‡∏¢‡πà‡∏≠‡∏¢ 3', amount: 200 },
    ],
  },
  {
    categoryId: 2,
    categoryName: '‡∏ó‡∏∏‡∏ô‡∏≠‡∏∏‡∏î‡∏´‡∏ô‡∏∏‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°',
    subItems: [
      { id: 21, name: '‡∏ó‡∏∏‡∏ô‡∏¢‡πà‡∏≠‡∏¢ 1', amount: null },
      { id: 22, name: '‡∏ó‡∏∏‡∏ô‡∏¢‡πà‡∏≠‡∏¢ 2', amount: 5000 },
      { id: 23, name: '‡∏ó‡∏∏‡∏ô‡∏¢‡πà‡∏≠‡∏¢ 3', amount: null },
    ],
  },
];

const formatTHB0 = (n) =>
  typeof n === 'number' && !Number.isNaN(n)
    ? n.toLocaleString('th-TH', { maximumFractionDigits: 0 })
    : '-';

// ---- normalizers ----
const normalizeYear = (y) => {
  if (typeof y === 'number' || typeof y === 'string') {
    const num = Number(y);
    return { id: num, label: String(num) };
  }
  const id = Number(y.year_id ?? y.id ?? y.year);
  const label = String(y.year ?? y.year_th ?? y.name ?? id);
  return { id, label };
};

const normalizeUser = (u) => {
  const id = u.user_id ?? u.id ?? u.uid ?? null;
  const fname = u.user_fname ?? u.first_name ?? '';
  const lname = u.user_lname ?? u.last_name ?? '';
  const name = (u.name ?? `${fname} ${lname}`)?.trim();
  const roleId = Number(u.role_id ?? u.role?.id ?? u.roleId ?? 0);
  return {
    user_id: id != null ? Number(id) : null,
    display_name: name || (u.email ? String(u.email) : `‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ #${id}`),
    role_id: roleId,
    delete_at: u.delete_at ?? null,
  };
};

// ---- main component ----
export default function ApprovalRecords() {
  // meta
  const [years, setYears] = useState([]);     // [{id,label}]
  const [users, setUsers] = useState([]);     // normalized users

  // filters
  const [year, setYear] = useState('');
  const [userId, setUserId] = useState('');

  const [loadingMeta, setLoadingMeta] = useState(true);

  // 1) ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏µ + ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô admin)
  useEffect(() => {
    let alive = true;

    async function loadMeta() {
      setLoadingMeta(true);
      try {
        const [yearsRes, usersRes] = await Promise.all([
          adminAPI.getYears(),                            // ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô lib
          apiClient.get('/users', { page_size: 1000 }),   // ‡∏î‡∏∂‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å /users
        ]);

        const yearListRaw = Array.isArray(yearsRes) ? yearsRes : yearsRes?.years || yearsRes?.data || [];
        const userListRaw = Array.isArray(usersRes) ? usersRes : usersRes?.users || usersRes?.data || [];

        const yearList = yearListRaw.map(normalizeYear);
        const allUsers = userListRaw.map(normalizeUser);

        // ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‚Äú‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô admin (role_id=3)‚Äù ‡πÅ‡∏•‡∏∞‡∏Å‡∏±‡∏ô soft-delete
        const visibleUsers = allUsers
          .filter((u) => u.user_id != null)
          .filter((u) => u.role_id !== 3)
          .filter((u) => !u.delete_at);

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠ UX
        visibleUsers.sort((a, b) => (a.display_name || '').localeCompare(b.display_name || '', 'th'));

        if (!alive) return;

        setYears(yearList);
        setUsers(visibleUsers);

        // ‡∏ï‡∏±‡πâ‡∏á default
        if (!year && yearList.length) setYear(yearList[0].label);
        if (!userId && visibleUsers.length) setUserId(visibleUsers[0].user_id);
      } catch (err) {
        console.error(err);
        toast.error('‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏µ/‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      } finally {
        if (alive) setLoadingMeta(false);
      }
    }

    loadMeta();
    return () => { alive = false; };
  }, []); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß

  // ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å MOCK_DATA (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ API ‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏£‡∏¥‡∏á)
  const grandTotal = useMemo(
    () => MOCK_DATA.reduce((sum, cat) => sum + cat.subItems.reduce((acc, it) => acc + (it.amount ?? 0), 0), 0),
    []
  );

  const selectedUser = users.find((u) => String(u.user_id) === String(userId));

  const handleExport = () => {
    toast('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤ Export CSV/Excel', { icon: 'üõ†Ô∏è' });
  };

  return (
    <PageLayout
      title="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏ô"
      subtitle="‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß"
      icon={FileCheck}
      breadcrumbs={[
        { label: '‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å', href: '/admin' },
        { label: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏ô' },
      ]}
      actions={
        <div className="flex gap-2">
          <button onClick={handleExport} className="btn btn-primary">
            <Download size={18} />
            Export
          </button>
        </div>
      }
    >
      {/* ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á */}
      <div className="mb-6">
        <Card title="‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á (Filters)" icon={Filter} collapsible={false}>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå/‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô admin) */}
            <div className="space-y-2">
              <label className="block text-ml font-medium text-gray-700">‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</label>
              <select
                className="w-full rounded-md border border-gray-300 px-3 py-2 text-ml"
                value={userId || ''}
                disabled={loadingMeta || !users.length}
                onChange={(e) => setUserId(Number(e.target.value))}
              >
                {users.length === 0 ? (
                  <option value="">{loadingMeta ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‚Ä¶' : '‚Äî ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚Äî'}</option>
                ) : (
                  users.map((u) => (
                    <option key={u.user_id} value={u.user_id}>
                      {u.display_name}
                    </option>
                  ))
                )}
              </select>
            </div>

            {/* ‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì */}
            <div className="space-y-2">
              <label className="block text-ml font-medium text-gray-700">‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì (‡∏û.‡∏®.)</label>
              <select
                className="w-full rounded-md border border-gray-300 px-3 py-2 text-ml"
                value={year || ''}
                disabled={loadingMeta || !years.length}
                onChange={(e) => setYear(e.target.value)}
              >
                {years.length === 0 ? (
                  <option value="">{loadingMeta ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‚Ä¶' : '‚Äî ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚Äî'}</option>
                ) : (
                  years.map((y) => (
                    <option key={y.id} value={y.label}>
                      {y.label}
                    </option>
                  ))
                )}
              </select>
            </div>
          </div>
        </Card>
      </div>

      {/* ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏• + ‡∏õ‡πâ‡∏≤‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ */}
      <Card
        icon={FileText}
        collapsible={false}
        title={
          <div className="flex items-center gap-3">
            <span>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏ô</span>
            <StatusBadge statusId={2} />
          </div>
        }
        headerClassName="items-center"
      >
        {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏∏‡∏ô (‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ mock ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤ API ‡∏à‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°) */}
        <div className="space-y-8">
          {MOCK_DATA.map((cat) => (
            <div key={cat.categoryId} className="space-y-3">
              <div className="font-bold">{cat.categoryName}</div>
              <div className="overflow-hidden rounded-md border border-gray-200">
                <table className="w-full">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-4 py-3 text-left text-ml font-medium text-gray-700">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</th>
                      <th className="px-4 py-3 text-right text-ml font-medium text-gray-700 w-48">
                        ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó)
                      </th>
                    </tr>
                  </thead>
                  <tbody className="divide-y divide-gray-100 bg-white">
                    {cat.subItems.map((item) => (
                      <tr key={item.id}>
                        <td className="px-4 py-3 text-ml">{item.name}</td>
                        <td className="px-4 py-3 text-ml text-right">
                          {item.amount == null ? (
                            <span className="text-gray-400 italic">-</span>
                          ) : (
                            formatTHB0(item.amount)
                          )}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>

              {/* ‡∏£‡∏ß‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î */}
              <div className="flex justify-end">
                <div className="bg-gray-50 rounded px-4 py-2 text-ml">
                  <span className="text-gray-600">‡∏£‡∏ß‡∏°‡∏´‡∏°‡∏ß‡∏î:</span>
                  <span className="ml-2 font-medium">
                    {formatTHB0(cat.subItems.reduce((s, it) => s + (it.amount ?? 0), 0))} ‡∏ö‡∏≤‡∏ó
                  </span>
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏£‡∏ß‡∏° (‡∏≠‡∏¢‡∏π‡πà‡∏•‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î) */}
        <div className="mt-10 pt-6 border-t flex flex-col md:flex-row md:items-center md:justify-between gap-3">
          <div className="text-base md:text-lg text-gray-700">
            ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå{' '}
            <span className="font-semibold text-gray-900">
              {selectedUser?.display_name || '‚Äî'}
            </span>{' '}
            ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏´‡πâ‡πÄ‡∏ö‡∏¥‡∏Å‡πÉ‡∏ô‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏õ‡∏µ{' '}
            <span className="font-semibold text-gray-900">
              {year || '‚Äî'}
            </span>
          </div>
          <div className="text-right">
            <div className="text-sm md:text-base text-gray-500">‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô</div>
            <div className="text-3xl md:text-4xl font-extrabold">
              {formatTHB0(grandTotal)} ‡∏ö‡∏≤‡∏ó
            </div>
          </div>
        </div>
      </Card>
    </PageLayout>
  );
}
